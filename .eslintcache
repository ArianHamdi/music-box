[{"/Users/arian/MyFiles/Projects/music-box/src/Layout/AppLayout/Components/Panel/Panel.js":"1","/Users/arian/MyFiles/Projects/music-box/src/Contexts/playlist-context.js":"2","/Users/arian/MyFiles/Projects/music-box/src/Components/InitialPlaylist/InitialPlaylist.js":"3","/Users/arian/MyFiles/Projects/music-box/src/Pages/Artist/Components/Songs/Songs.js":"4","/Users/arian/MyFiles/Projects/music-box/src/utilities/utilities.js":"5"},{"size":5097,"mtime":1611013295387,"results":"6","hashOfConfig":"7"},{"size":1707,"mtime":1611012721519,"results":"8","hashOfConfig":"7"},{"size":426,"mtime":1611010094870,"results":"9","hashOfConfig":"7"},{"size":1938,"mtime":1611011708510,"results":"10","hashOfConfig":"7"},{"size":388,"mtime":1611013068669,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"13wnshj",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/arian/MyFiles/Projects/music-box/src/Layout/AppLayout/Components/Panel/Panel.js",["24"],"import { useState, useRef, useEffect } from 'react'\nimport styles from './Panel.module.scss';\n\nimport { usePlaylist, useIndexUpdate } from '../../../../Contexts/playlist-context'\nimport { usePrevious } from '../../../../Hooks/usePrevius'\n\nimport { convertTime } from '../../../../utilities/utilities'\n\nimport InputRange from '../../../../Components/InputRange/InputRange'\nimport Icon from '../../../../Components/Icon/Icon'\n\nimport Favorite from '../../../../assets/SVGs/Favorite.svg'\nimport FavoriteFill from '../../../../assets/SVGs/Favorite-fill.svg'\nimport Shuffle from '../../../../assets/SVGs/Shuffle.svg'\nimport Repeat from '../../../../assets/SVGs/Repeat.svg'\nimport previousSong from '../../../../assets/SVGs/PreviousSong.svg'\nimport nextSong from '../../../../assets/SVGs/NextSong.svg'\nimport Pause from '../../../../assets/SVGs/Pause.svg'\nimport Play from '../../../../assets/SVGs/Play.svg'\nimport volume from '../../../../assets/SVGs/Volume.svg'\n\nconst Panel = () => {\n\n    const playlist = usePlaylist();\n    const updateIndex = useIndexUpdate();\n    const prevPlaylist = usePrevious(playlist);\n\n    // const [index, setIndex] = useState(0);\n    const audioRef = useRef(null);\n    const [isPlaying, setIsPlaying] = useState(false);\n    const [favorite, setFavorite] = useState(false);\n    const [progressPercentage, setProgressPercentage] = useState(0)\n    const [songVolume, setSongVolume] = useState(100);\n    const [songState, setSongState] = useState({\n        currentTime: 0,\n        duration: 0,\n    })\n\n    useEffect(() => {\n        if (playlist?.count !== prevPlaylist?.count && playlist?.count !== 0) {\n            setIsPlaying(true);\n            const playPromise = audioRef.current.play();\n            if (playPromise !== undefined) {\n                playPromise\n                    .then(() => { })\n                    .catch(() => { })\n            }\n        }\n    }, [playlist, isPlaying])\n\n    if (!playlist) return null;\n\n    const endSongHandler = () => {\n        updateIndex();\n    }\n\n    const changeSongVolumeHandler = event => {\n        const volume = event.target.value\n        audioRef.current.volume = volume / 100;\n        setSongVolume(volume)\n    }\n\n    const changeProgressHandler = event => {\n        const newTime = event.target.value;\n        setProgressPercentage(newTime);\n        const duration = audioRef.current.duration;\n        audioRef.current.currentTime = newTime * duration / 100;\n    }\n\n    const songTimerHandler = event => {\n        const currentTime = event.target.currentTime\n        const duration = event.target.duration;\n        const progressPercentage = Math.ceil(currentTime * 100 / duration) || 0;\n        setSongState({ currentTime, duration });\n        setProgressPercentage(progressPercentage)\n\n    }\n\n    const changeFavoriteHandler = () => {\n        setFavorite(prevState => !prevState)\n    }\n\n    const playPauseHandler = () => {\n        const audio = audioRef.current;\n        const playPromise = isPlaying ? audio.pause() : audio.play();\n        if (playPromise !== undefined) {\n            playPromise.then(() => {\n\n            })\n        }\n        setIsPlaying(prevState => !prevState)\n    }\n\n    const Playing = isPlaying ? Pause : Play;\n    const Tavorite = favorite ? FavoriteFill : Favorite;\n\n    const currentTime = convertTime(songState.currentTime)\n    const duration = convertTime(songState.duration)\n\n    const info = playlist.songs[playlist.index];\n\n    return (\n        <div className={styles.panel}>\n            <div className={styles.music}>\n                <img src={info.album.cover_small} alt=\"music cover\" />\n                <div>\n                    <p className={styles.name}>{info.title}</p>\n                    <p className={styles.artist}>{info.artist.name}</p>\n                </div>\n                <Icon src={Tavorite} onClick={changeFavoriteHandler} />\n            </div>\n            <div className={styles.controller}>\n                <div className={styles.buttons}>\n                    <Icon src={Shuffle} />\n                    <Icon src={previousSong} />\n                    <Icon src={Playing} size={20} onClick={playPauseHandler} />\n                    <Icon src={nextSong} />\n                    <Icon src={Repeat} />\n                </div>\n                <div className={styles.progress}>\n                    <p>{currentTime}</p>\n                    <InputRange min='0' max='100' value={progressPercentage} onChange={changeProgressHandler}\n                        from='#9b2def' to='#053b64' width='35rem' />\n                    <p>{duration}</p>\n                </div>\n                <audio ref={audioRef} src={info.preview} onTimeUpdate={songTimerHandler} onEnded={endSongHandler}\n                    onLoadedMetadata={songTimerHandler} />\n            </div>\n            <div className={styles.volume}>\n                <Icon src={volume} />\n                <InputRange min='0' max='100' value={songVolume} onChange={changeSongVolumeHandler}\n                    from='white' to='white' width='10rem' thumb='#161a1a' />\n            </div>\n        </div>\n    )\n}\n\nexport default Panel;","/Users/arian/MyFiles/Projects/music-box/src/Contexts/playlist-context.js",[],"/Users/arian/MyFiles/Projects/music-box/src/Components/InitialPlaylist/InitialPlaylist.js",[],"/Users/arian/MyFiles/Projects/music-box/src/Pages/Artist/Components/Songs/Songs.js",["25"],"import { useState } from 'react';\nimport styles from './Songs.module.scss';\n\nimport { usePlaylistUpdate } from '../../../../Contexts/playlist-context'\n\nimport { convertTime } from '../../../../utilities/utilities'\nimport Button from '../../../../Components/Button/Button'\nimport Icon from '../../../../Components/Icon/Icon'\n\nimport play from '../../../../assets/SVGs/Play.svg'\n\nconst Songs = ({ songs, isDark }) => {\n\n\n    const [toggle, setToggle] = useState(false);\n\n    const setPlaylist = usePlaylistUpdate();\n\n    const playSong = index => {\n        setPlaylist(songs, index)\n    }\n\n    const toggleHandler = () => {\n        setToggle(prevState => !prevState);\n    }\n\n    const color = isDark ? '#fff' : \"#000\"\n\n    const songItems = songs.map((song, index) => {\n        return (\n            <div className={styles.song} style={{ color }} key={index}>\n                <h6>{index + 1}</h6>\n                <img src={song.album.cover_small} alt='music cover' />\n                <p>{song.title}</p>\n                <p>{song.artist.name}</p>\n                <p>{song.album.title}</p>\n                <p>{convertTime(song.duration)}</p>\n                <Icon src={play} size={20} fill={color} onClick={() => playSong(index)} />\n            </div>\n        )\n    })\n\n    const songsShown = toggle ? songItems : songItems.slice(0, 5);\n\n    const title = toggle ? 'show 5 less' : 'show 5 more';\n\n    return (\n        <div className={styles.songs} style={{ color }}>\n            <h4>Papular songs</h4>\n            <div className={styles.song}>\n                <h6>#</h6>\n                <p>cover</p>\n                <p>title</p>\n                <p>artist</p>\n                <p>album</p>\n                <p>time</p>\n                <p>icon</p>\n            </div>\n            {songItems}\n            <Button className={styles.button} title={title} uppercase onClick={toggleHandler} color={color} />\n        </div>\n    )\n}\n\nexport default Songs;","/Users/arian/MyFiles/Projects/music-box/src/utilities/utilities.js",[],{"ruleId":"26","severity":1,"message":"27","line":49,"column":8,"nodeType":"28","endLine":49,"endColumn":29,"suggestions":"29"},{"ruleId":"30","severity":1,"message":"31","line":43,"column":11,"nodeType":"32","messageId":"33","endLine":43,"endColumn":21},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'prevPlaylist?.count'. Either include it or remove the dependency array.","ArrayExpression",["34"],"no-unused-vars","'songsShown' is assigned a value but never used.","Identifier","unusedVar",{"desc":"35","fix":"36"},"Update the dependencies array to be: [playlist, isPlaying, prevPlaylist?.count]",{"range":"37","text":"38"},[1893,1914],"[playlist, isPlaying, prevPlaylist?.count]"]